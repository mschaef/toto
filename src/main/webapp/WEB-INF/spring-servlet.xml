<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                           http://www.springframework.org/schema/mvc
                           http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
                           http://www.springframework.org/schema/jdbc
                           http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context-3.0.xsd">

  <mvc:annotation-driven />

  <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
    <property name="templateLoaderPath" value="/WEB-INF/views/"/>
  </bean>

  <bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
    <property name="cache" value="true"/>
    <property name="prefix" value=""/>
    <property name="suffix" value=".ftl"/>
  
    <!-- if you want to use the Spring FreeMarker macros, set this property to true -->
    <property name="exposeSpringMacroHelpers" value="true"/>
  </bean>


  <bean id="dataSource"
        class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
    <constructor-arg>
      <bean class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="org.h2.Driver" />
        <property name="url"
                  value="jdbc:h2:~/ectworks/toto/toto.h2db" />
        <property name="username" value="sa"/>
        <property name="password" value=""/>  
      </bean>
    </constructor-arg>
  </bean>

  <!-- provides a H2 console to look into the db if necessary -->
  <bean id="h2console" class="org.h2.tools.Server" 
        factory-method="createWebServer" depends-on="dataSource" 
        init-method="start" lazy-init="false">
    <constructor-arg value="-web,-webPort,11111" />
  </bean>

  <bean id="todoItemDao"
        class="com.ectworks.toto.dao.TodoItemDao">
    <property name="dataSource" ref="dataSource"/>
  </bean>

  <bean id="userDao"
        class="com.ectworks.toto.dao.UserDao"/>

  <mvc:resources mapping="/resources/**" location="/resources/" />

  <context:component-scan base-package="com.ectworks.toto.web.controller" />


  <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
    <property name="securityManager" ref="securityManager"/>
    <!-- override these for application-specific URLs if you like:
         <property name="loginUrl" value="/login.jsp"/>
         <property name="successUrl" value="/home.jsp"/>
         <property name="unauthorizedUrl" value="/unauthorized.jsp"/> -->
    <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
    <!-- defined will be automatically acquired and available via its beanName in chain        -->
    <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
    <!-- <property name="filters">
         <util:map>
         <entry key="anAlias" value-ref="someFilter"/>
         </util:map>
         </property> -->
    <property name="filterChainDefinitions">
      <value>
        # some example chain definitions:
        /admin/** = authc, roles[admin]
        /docs/** = authc, perms[document:read]
        /** = authc
        # more URL-to-FilterChain definitions here
      </value>
    </property>
  </bean>
  
  <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
    <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
    <property name="realm" ref="myRealm"/>
    <!-- By default the servlet container sessions will be used.  Uncomment this line
         to use shiro's native sessions (see the JavaDoc for more): -->
    <!-- <property name="sessionMode" value="native"/> -->
  </bean>

  <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

<!-- Define the Shiro Realm implementation you want to use to connect to your back-end -->
<!-- security datasource: -->
<!--
<bean id="myRealm" class="...">

</bean>
-->

</beans>